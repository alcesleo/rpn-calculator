{"version":3,"sources":["index.js"],"names":["DECIMAL","MINUS","DISPLAY_ROWS","EMPTY_DISPLAY","EMPTY_STACK","DISPLAY_PADDING","Array","fill","Calculator","props","getDisplayRows","state","stack","slice","reverse","handleRoll","setState","handleDivision","handleArithmetic","lhs","rhs","handleMultiplication","handleSubtraction","handleAddition","digitHandler","digit","updateDisplay","display","handleDecimal","indexOf","fn","length","console","log","result","Number","parseFloat","handleSign","substr","handleClear","handleDrop","handleDelete","handleEnter","map","item","index","className","this","row","i","key","onClick","handleUndo","handleRedo","handleSwap","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7d606c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\n\r\nconst DECIMAL = '.';\r\nconst MINUS = '-';\r\nconst DISPLAY_ROWS = 5;\r\nconst EMPTY_DISPLAY = '0';\r\nconst EMPTY_ROW = '\\u00A0'; // &nbsp;\r\nconst EMPTY_STACK = [EMPTY_DISPLAY];\r\nconst DISPLAY_PADDING = Array(DISPLAY_ROWS - 1).fill(EMPTY_ROW);\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stack: EMPTY_STACK,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculator\">\r\n        <div className=\"display\">{this.getDisplayRows().map((row, i) =>\r\n          <div key={i} className=\"display_row\">{row}</div>\r\n        )}\r\n        </div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleRoll}>Roll</div>\r\n        <div className=\"btn operator\" onClick={this.handleUndo}>Undo</div>\r\n        <div className=\"btn operator\" onClick={this.handleRedo}>Redo</div>\r\n        <div className=\"btn operator\" onClick={this.handleSign}>+/-</div>\r\n        <div className=\"btn operator\" onClick={this.handleDivision}>/</div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleSwap}>Swap</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('7')}>7</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('8')}>8</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('9')}>9</div>\r\n        <div className=\"btn operator\" onClick={this.handleMultiplication}>*</div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleClear}>Clear</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('4')}>4</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('5')}>5</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('6')}>6</div>\r\n        <div className=\"btn operator\" onClick={this.handleSubtraction}>-</div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleDrop}>Drop</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('1')}>1</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('2')}>2</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('3')}>3</div>\r\n        <div className=\"btn operator\" onClick={this.handleAddition}>+</div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleDelete}>Del</div>\r\n        <div className=\"btn operator\" onClick={this.handleDecimal}>{DECIMAL}</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('0')}>0</div>\r\n        <div className=\"btn operator enter\" onClick={this.handleEnter}>Enter</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getDisplayRows = () => {\r\n    return [...this.state.stack, ...DISPLAY_PADDING].slice(0, DISPLAY_ROWS).reverse();\r\n  }\r\n\r\n  handleRoll = () => {\r\n    this.setState({\r\n      stack: [...this.state.stack.slice(1), this.state.stack[0]],\r\n    });\r\n  }\r\n\r\n  handleDivision = () => this.handleArithmetic((lhs, rhs) => lhs / rhs);\r\n  handleMultiplication = () => this.handleArithmetic((lhs, rhs) => lhs * rhs);\r\n  handleSubtraction = () => this.handleArithmetic((lhs, rhs) => lhs - rhs);\r\n  handleAddition = () => this.handleArithmetic((lhs, rhs) => lhs + rhs);\r\n\r\n  digitHandler = digit => {\r\n    return () => {\r\n      this.updateDisplay((display) => display !== EMPTY_DISPLAY ? `${display}${digit}` : digit);\r\n    }\r\n  }\r\n\r\n  handleDecimal = () => {\r\n    this.updateDisplay((display) => display.indexOf(DECIMAL) === -1 ? `${display}${DECIMAL}` : display);\r\n  }\r\n\r\n  handleArithmetic = (fn) => {\r\n    if (this.state.stack.length < 2) {\r\n      console.log('You need at least 2 numbers on the stack to perform arithmetic.');\r\n      return;\r\n    }\r\n    const [rhs, lhs] = this.state.stack.slice(0, 2);\r\n    const result = fn(Number.parseFloat(lhs), Number.parseFloat(rhs));\r\n\r\n    this.setState({\r\n      stack: [result, ...this.state.stack.slice(2)]\r\n    })\r\n  }\r\n\r\n  handleSign = () => {\r\n    this.updateDisplay((display) => display.indexOf(MINUS) === -1 ? `${MINUS}${display}` : display.substr(1));\r\n  }\r\n\r\n  handleClear = () => {\r\n    this.setState({\r\n      stack: EMPTY_STACK\r\n    });\r\n  }\r\n\r\n  handleDrop = () => {\r\n    if (this.state.stack.length === 1) {\r\n      return this.handleClear();\r\n    }\r\n\r\n    this.setState({\r\n      stack: this.state.stack.slice(1),\r\n    })\r\n  }\r\n\r\n  handleDelete = () => {\r\n    this.updateDisplay((display) => display.length > 1 ? display.slice(0, -1) : EMPTY_DISPLAY);\r\n  }\r\n\r\n  handleEnter = () => {\r\n    this.setState({\r\n      stack: [EMPTY_DISPLAY, ...this.state.stack]\r\n    })\r\n  }\r\n\r\n  updateDisplay = fn => {\r\n    this.setState(state => ({\r\n      stack: state.stack.map((item, index) => { return index === 0 ? fn(item) : item; }),\r\n    }));\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Calculator />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}