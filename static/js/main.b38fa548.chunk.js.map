{"version":3,"sources":["index.js"],"names":["DECIMAL","MINUS","DISPLAY_ROWS","EMPTY_DISPLAY","EMPTY_STACK","DISPLAY_PADDING","Array","fill","Calculator","props","getDisplayRows","getStack","slice","reverse","state","history","historyPosition","setStack","func","newStack","newHistory","setState","handleUndo","handleRedo","length","handleRoll","stack","handleDivision","handleArithmetic","lhs","rhs","handleMultiplication","handleSubtraction","handleAddition","digitHandler","digit","updateDisplay","display","handleDecimal","indexOf","console","log","result","Number","parseFloat","handleSign","substr","handleClear","handleDrop","handleDelete","handleEnter","map","item","index","className","this","row","i","key","onClick","handleSwap","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b38fa548.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\n\r\nconst DECIMAL = '.';\r\nconst MINUS = '-';\r\nconst DISPLAY_ROWS = 5;\r\nconst EMPTY_DISPLAY = '0';\r\nconst EMPTY_ROW = '\\u00A0'; // &nbsp;\r\nconst EMPTY_STACK = [EMPTY_DISPLAY];\r\nconst DISPLAY_PADDING = Array(DISPLAY_ROWS - 1).fill(EMPTY_ROW);\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [EMPTY_STACK],\r\n      historyPosition: 0,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculator\">\r\n        <div className=\"display\">{this.getDisplayRows().map((row, i) =>\r\n          <div key={i} className=\"display_row\">{row}</div>\r\n        )}\r\n        </div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleRoll}>Roll</div>\r\n        <div className=\"btn operator\" onClick={this.handleUndo}>Undo</div>\r\n        <div className=\"btn operator\" onClick={this.handleRedo}>Redo</div>\r\n        <div className=\"btn operator\" onClick={this.handleSign}>+/-</div>\r\n        <div className=\"btn operator\" onClick={this.handleDivision}>/</div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleSwap}>Swap</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('7')}>7</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('8')}>8</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('9')}>9</div>\r\n        <div className=\"btn operator\" onClick={this.handleMultiplication}>*</div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleClear}>Clear</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('4')}>4</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('5')}>5</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('6')}>6</div>\r\n        <div className=\"btn operator\" onClick={this.handleSubtraction}>-</div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleDrop}>Drop</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('1')}>1</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('2')}>2</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('3')}>3</div>\r\n        <div className=\"btn operator\" onClick={this.handleAddition}>+</div>\r\n\r\n        <div className=\"btn operator\" onClick={this.handleDelete}>Del</div>\r\n        <div className=\"btn operator\" onClick={this.handleDecimal}>{DECIMAL}</div>\r\n        <div className=\"btn\" onClick={this.digitHandler('0')}>0</div>\r\n        <div className=\"btn operator enter\" onClick={this.handleEnter}>Enter</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getDisplayRows = () => {\r\n    return [...this.getStack(), ...DISPLAY_PADDING].slice(0, DISPLAY_ROWS).reverse();\r\n  }\r\n\r\n  getStack = () => this.state.history[this.state.historyPosition];\r\n\r\n  setStack = func => {\r\n    const newStack = func(this.getStack());\r\n    const newHistory = [...this.state.history.slice(0, this.state.historyPosition + 1), newStack];\r\n\r\n    this.setState(state => ({\r\n      history: newHistory,\r\n      historyPosition: state.historyPosition + 1,\r\n    }));\r\n  }\r\n\r\n  handleUndo = () => {\r\n    if (this.historyPosition <= 0) return;\r\n\r\n    this.setState(state => ({\r\n      historyPosition: state.historyPosition - 1\r\n    }));\r\n  }\r\n\r\n  handleRedo = () => {\r\n    if (this.state.historyPosition >= this.state.history.length - 1) return;\r\n\r\n    this.setState(state => ({\r\n      historyPosition: state.historyPosition + 1,\r\n    }));\r\n  }\r\n\r\n  handleRoll = () => {\r\n    this.setStack(stack => [...stack.slice(1), stack[0]]);\r\n  }\r\n\r\n  handleDivision       = () => this.handleArithmetic((lhs, rhs) => lhs / rhs);\r\n  handleMultiplication = () => this.handleArithmetic((lhs, rhs) => lhs * rhs);\r\n  handleSubtraction    = () => this.handleArithmetic((lhs, rhs) => lhs - rhs);\r\n  handleAddition       = () => this.handleArithmetic((lhs, rhs) => lhs + rhs);\r\n\r\n  digitHandler = digit => {\r\n    return () => {\r\n      this.updateDisplay((display) => display !== EMPTY_DISPLAY ? `${display}${digit}` : digit);\r\n    }\r\n  }\r\n\r\n  handleDecimal = () => {\r\n    this.updateDisplay((display) => display.indexOf(DECIMAL) === -1 ? `${display}${DECIMAL}` : display);\r\n  }\r\n\r\n  handleArithmetic = (func) => {\r\n    const stack = this.getStack()\r\n    if (stack.length < 2) {\r\n      console.log('You need at least 2 numbers on the stack to perform arithmetic.');\r\n      return;\r\n    }\r\n    const [rhs, lhs] = stack.slice(0, 2);\r\n    const result = func(Number.parseFloat(lhs), Number.parseFloat(rhs));\r\n\r\n    this.setStack(stack => [result, ...stack.slice(2)])\r\n  }\r\n\r\n  handleSign = () => {\r\n    this.updateDisplay((display) => display.indexOf(MINUS) === -1 ? `${MINUS}${display}` : display.substr(1));\r\n  }\r\n\r\n  handleClear = () => {\r\n    this.setStack(() => EMPTY_STACK);\r\n  }\r\n\r\n  handleDrop = () => {\r\n    this.setStack(stack => stack.length === 1 ? EMPTY_STACK : stack.slice(1));\r\n  }\r\n\r\n  handleDelete = () => {\r\n    this.updateDisplay((display) => display.length > 1 ? display.slice(0, -1) : EMPTY_DISPLAY);\r\n  }\r\n\r\n  handleEnter = () => {\r\n    this.setStack(stack => [EMPTY_DISPLAY, ...stack]);\r\n  }\r\n\r\n  updateDisplay = func => {\r\n    this.setStack(stack => stack.map(\r\n      (item, index) => index === 0 ? func(item) : item)\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Calculator />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}